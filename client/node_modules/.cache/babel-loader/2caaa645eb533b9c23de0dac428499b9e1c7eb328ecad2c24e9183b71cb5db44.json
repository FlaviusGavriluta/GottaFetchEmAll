{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nexport const Pokemons = _ref => {\n  _s();\n  let {\n    locationUrl\n  } = _ref;\n  const [pokemon, setPokemon] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const locationResponse = await fetch(locationUrl);\n        const locationData = await locationResponse.json();\n        const areas = locationData.areas;\n        const indexRandom = Math.floor(Math.random() * areas.length);\n        const areaUrl = areas[indexRandom].url;\n        const areaResponse = await fetch(areaUrl);\n        const areaData = await areaResponse.json();\n        const pokemonEncounters = areaData.pokemon_enc;\n        setPokemon(areaUrl);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n  console.log(pokemon);\n  return null;\n};\n_s(Pokemons, \"4D0jkhGq0ZINAQVoOiMhL4+r3a8=\");\n_c = Pokemons;\nvar _c;\n$RefreshReg$(_c, \"Pokemons\");","map":{"version":3,"names":["React","useEffect","useState","Pokemons","_ref","_s","locationUrl","pokemon","setPokemon","fetchData","locationResponse","fetch","locationData","json","areas","indexRandom","Math","floor","random","length","areaUrl","url","areaResponse","areaData","pokemonEncounters","pokemon_enc","err","console","log","_c","$RefreshReg$"],"sources":["C:/Users/Flavius/Documents/0. CodeCool/2. Web Frameworks/3rd TW/gotta-fetch-em-all-react-ChircuAndrei/client/src/components/Pokemons.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport const Pokemons = ({ locationUrl }) => {\r\n  const [pokemon, setPokemon] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const locationResponse = await fetch(locationUrl);\r\n        const locationData = await locationResponse.json();\r\n        const areas = locationData.areas;\r\n        const indexRandom = Math.floor(Math.random() * areas.length);\r\n        const areaUrl = areas[indexRandom].url;\r\n        const areaResponse = await fetch(areaUrl);\r\n        const areaData = await areaResponse.json();\r\n        const pokemonEncounters = areaData.pokemon_enc\r\n\r\n        setPokemon(areaUrl);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    fetchData();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  console.log(pokemon);\r\n\r\n  return null;\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAO,MAAMC,QAAQ,GAAGC,IAAA,IAAqB;EAAAC,EAAA;EAAA,IAApB;IAAEC;EAAY,CAAC,GAAAF,IAAA;EACtC,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,gBAAgB,GAAG,MAAMC,KAAK,CAACL,WAAW,CAAC;QACjD,MAAMM,YAAY,GAAG,MAAMF,gBAAgB,CAACG,IAAI,EAAE;QAClD,MAAMC,KAAK,GAAGF,YAAY,CAACE,KAAK;QAChC,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,KAAK,CAACK,MAAM,CAAC;QAC5D,MAAMC,OAAO,GAAGN,KAAK,CAACC,WAAW,CAAC,CAACM,GAAG;QACtC,MAAMC,YAAY,GAAG,MAAMX,KAAK,CAACS,OAAO,CAAC;QACzC,MAAMG,QAAQ,GAAG,MAAMD,YAAY,CAACT,IAAI,EAAE;QAC1C,MAAMW,iBAAiB,GAAGD,QAAQ,CAACE,WAAW;QAE9CjB,UAAU,CAACY,OAAO,CAAC;MACrB,CAAC,CAAC,OAAOM,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAClB;IACF,CAAC;IACDjB,SAAS,EAAE;IACX;EACF,CAAC,EAAE,EAAE,CAAC;EACNkB,OAAO,CAACC,GAAG,CAACrB,OAAO,CAAC;EAEpB,OAAO,IAAI;AACb,CAAC;AAACF,EAAA,CA1BWF,QAAQ;AAAA0B,EAAA,GAAR1B,QAAQ;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}